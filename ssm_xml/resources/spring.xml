<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 配置包扫描 -->
	<context:component-scan base-package="cn.ycb.ssm"></context:component-scan>
	
	<!-- 读取db.properties配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<!-- 注意：此处的配置文件中的名字不能为username，否则默认读取系统本地主机名 -->
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
	</bean>
	
	<!-- Mybatis与Spring集成 -->
	
	<!-- 第一步：配置Mybatis的SqlSessionFactory工厂对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 设置别名 -->
		<property name="typeAliasesPackage" value="cn.ycb.ssm.pojo"/>
		
		<!-- 加载Mybatis部分默认配置文件 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!-- 第二步：使用包扫描创建映射接口的代理对象
				注意：此处无需创建SqlSession对象，在底层会自动创建
				org.mybatis.spring.mapper.MapperScannerConfigurer
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置映射接口对应的包 -->
		<property name="basePackage" value="cn.ycb.ssm.mapper"/>
		
		<!-- 配置工厂bean的名称：可选 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	<!-- 配置事务：
		1.配置事务管理器
		2.配置事务通知
		3.配置AOP切面
	 -->
	<!-- 1.配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 2.配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 配置DQL语句规则:配置只读属性 -->
			<tx:method name="select*" read-only="true"/>
			
			<!-- 配置其他(DML):设为默认即可 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3.配置切面:切面=切点+通知 -->
	<aop:config>
		<!-- 配置多个切面 -->
		<!-- <aop:pointcut expression="execution(* cn.ycb.ssm.service..*.*(..))||execution(* cn.ycb.ssm.service2..*.*(..))" id="pointcutRef"/> -->	
		<!-- 配置单个切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.ycb.ssm.service..*.*(..))"/>
	</aop:config>
	
</beans>
